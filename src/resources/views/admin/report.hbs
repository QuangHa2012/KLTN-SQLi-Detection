<div class="container mt-4">
    <h2 class="mb-4 text-center font-weight-bold">üìä B√°o c√°o th·ªëng k√™</h2>

    <!-- ===== T·ªïng quan ===== -->
    <div class="row text-center mb-4">
        <div class="col-md-4 mb-3">
        <div class="card shadow-sm border-0">
            <div class="card-body">
            <h6 class="text-muted">Doanh thu h√¥m nay</h6>
            <h3 id="revenueToday" class="text-success">0 ‚Ç´</h3>
            </div>
        </div>
        </div>
        <div class="col-md-4 mb-3">
        <div class="card shadow-sm border-0">
            <div class="card-body">
            <h6 class="text-muted">T·ªïng ƒë∆°n h√†ng(to√†n h·ªá th·ªëng)</h6>
            <h3 id="totalOrders" class="text-primary">0</h3>
            </div>
        </div>
        </div>
        <div class="col-md-4 mb-3">
        <div class="card shadow-sm border-0">
            <div class="card-body">
            <h6 class="text-muted">S·∫£n ph·∫©m ƒë√£ b√°n</h6>
            <h3 id="totalSold" class="text-info">0</h3>
            </div>
        </div>
        </div>
    </div>

    <!-- ===== B·ªô l·ªçc nhanh ===== -->
    <div class="d-flex justify-content-between align-items-center mb-4 flex-wrap">
        <div class="form-inline mb-2">
        <label for="quickRange" class="mr-2 font-weight-bold">Kho·∫£ng th·ªùi gian:</label>
        <select id="quickRange" class="form-control mr-3">
            <option value="7">7 ng√†y qua</option>
            <option value="30">30 ng√†y qua</option>
            <option value="month">Th√°ng n√†y</option>
            <option value="custom">T√πy ch·ªçn</option>
        </select>
        </div>

        <form id="filterForm" class="form-inline mb-2">
        <input type="date" id="startDate" class="form-control mr-2">
        <input type="date" id="endDate" class="form-control mr-2">
        <button class="btn btn-primary">L·ªçc</button>
        </form>
    </div>

    <!-- ===== Bi·ªÉu ƒë·ªì ===== -->
    <div class="row">
        <div class="col-md-6 mb-4">
        <div class="card shadow-sm">
            <div class="card-header bg-light font-weight-bold">Doanh thu theo ng√†y</div>
            <div class="card-body">
            <canvas id="revenueChart" height="150"></canvas>
            </div>
        </div>
        </div>
        <div class="col-md-6 mb-4">
        <div class="card shadow-sm">
            <div class="card-header bg-light font-weight-bold">Tr·∫°ng th√°i ƒë∆°n h√†ng</div>
            <div class="card-body">
            <canvas id="statusChart" height="150"></canvas>
            </div>
        </div>
        </div>
        <div class="col-md-12 mb-4">
        <div class="card shadow-sm">
            <div class="card-header bg-light font-weight-bold">S·∫£n ph·∫©m b√°n ch·∫°y</div>
            <div class="card-body">
            <canvas id="bestSellerChart" height="150"></canvas>
            </div>
        </div>
        </div>
    </div>
</div>

<!-- ===== Chart.js ===== -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>
    let revenueChart, statusChart, bestSellerChart;

    // ===== ƒê·ªãnh d·∫°ng ti·ªÅn t·ªá =====
    const formatVND = (val) => {
        if (!val || isNaN(val)) return '0 ‚Ç´';
        return new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' }).format(val);
    };

    // ===== LOAD SUMMARY =====
    async function loadSummary() {
        const res = await fetch('/admin/api/summary');
        const data = await res.json();

        document.getElementById('revenueToday').textContent = formatVND(data.revenueToday);
        document.getElementById('totalOrders').textContent = data.totalOrders || 0;
        document.getElementById('totalSold').textContent = data.totalSold || 0;
    }

    // ===== LOAD DOANH THU =====
    async function loadRevenue(startDate, endDate) {
        const res = await fetch(`/admin/api/revenue/day?startDate=${startDate}&endDate=${endDate}`);
        const data = await res.json();

        const labels = data.map(d => d.date);
        const revenues = data.map(d => d.revenue);

        if (revenueChart) revenueChart.destroy();

        const ctx = document.getElementById('revenueChart').getContext('2d');
        revenueChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels,
            datasets: [{
            label: 'Doanh thu (VNƒê)',
            data: revenues,
            borderColor: 'rgba(75,192,192,1)',
            backgroundColor: 'rgba(75,192,192,0.2)',
            borderWidth: 2,
            fill: true
            }]
        },
        options: { responsive: true, maintainAspectRatio: false }
        });
    } 

    // ===== LOAD TR·∫†NG TH√ÅI ƒê∆†N H√ÄNG =====
    async function loadOrderStatus() {
        try {
            const res = await fetch('/admin/api/orders/status');
            const data = await res.json();
            console.log(" D·ªØ li·ªáu tr·∫°ng th√°i:", data);

            if (!data || data.length === 0) {
            console.warn(" Kh√¥ng c√≥ d·ªØ li·ªáu tr·∫°ng th√°i ƒë∆°n h√†ng");
            return;
            }

            // T·ªïng s·ªë ƒë∆°n h√†ng ƒë·ªÉ t√≠nh %
            const total = data.reduce((sum, d) => sum + d.totalOrders, 0);

            // √Ånh x·∫° nh√£n v√† m√†u
            const mapLabel = {
            pending: "ƒêang x·ª≠ l√Ω",
            paid: "ƒê√£ thanh to√°n",
            failed: "Th·∫•t b·∫°i",
            cancelled: "ƒê√£ h·ªßy"
            };
            const mapColor = {
            pending: "#ff9800",
            paid: "#4caf50",
            failed: "#9c27b0",
            cancelled: "#f44336"
            };

            // Chu·∫©n b·ªã d·ªØ li·ªáu bi·ªÉu ƒë·ªì
            const labels = data.map(d => mapLabel[d.status] || d.status);
            const counts = data.map(d => d.totalOrders);
            const colors = data.map(d => mapColor[d.status] || "#9e9e9e");
            const percents = data.map(d => ((d.totalOrders / total) * 100).toFixed(1));

            if (statusChart) statusChart.destroy();

            const ctx = document.getElementById('statusChart').getContext('2d');
            statusChart = new Chart(ctx, {
            type: 'doughnut',
            data: {
                labels,
                datasets: [{
                data: counts,
                backgroundColor: colors,
                borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                legend: {
                    position: 'bottom',
                    labels: { font: { size: 14 }, color: '#333' }
                },
                tooltip: {
                    callbacks: {
                    label: function (context) {
                        const i = context.dataIndex;
                        const label = labels[i];
                        const count = counts[i];
                        const percent = percents[i];
                        return `${label}: ${count} ƒë∆°n (${percent}%)`;
                    }
                    }
                }
                }
            }
            });
        } catch (err) {
            console.error(" L·ªói loadOrderStatus:", err);
        }
    }

    // ===== QUICK RANGE =====
    document.getElementById('quickRange').addEventListener('change', function() {
        const val = this.value;
        const today = new Date();
        let start, end;

        if (val === '7') {
        start = new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000);
        end = today;
        } else if (val === '30') {
        start = new Date(today.getTime() - 30 * 24 * 60 * 60 * 1000);
        end = today;
        } else if (val === 'month') {
        start = new Date(today.getFullYear(), today.getMonth(), 1);
        end = today;
        } else {
        return; // custom
        }

        const startStr = start.toISOString().slice(0, 10);
        const endStr = end.toISOString().slice(0, 10);
        document.getElementById('startDate').value = startStr;
        document.getElementById('endDate').value = endStr;

        updateAllCharts(startStr, endStr);
    });

    // ===== FORM FILTER =====
    document.getElementById('filterForm').addEventListener('submit', e => {
        e.preventDefault();
        const start = document.getElementById('startDate').value;
        const end = document.getElementById('endDate').value;
        updateAllCharts(start, end);
    });

    // ===== C·∫¨P NH·∫¨T TO√ÄN B·ªò =====
    async function updateAllCharts(start, end) {
        await loadRevenue(start, end);
        await loadOrderStatus();
        await loadBestSellers();
    }

    // ===== INIT =====
    window.addEventListener('DOMContentLoaded', () => {
        const today = new Date().toISOString().slice(0, 10);
        const lastWeek = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString().slice(0, 10);

        document.getElementById('startDate').value = lastWeek;
        document.getElementById('endDate').value = today;

        loadSummary();
        updateAllCharts(lastWeek, today);
    });
</script>

