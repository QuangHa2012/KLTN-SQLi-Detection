const { sql, connectDB } = require('../../config/db/db');

class UserModel {
    // T·∫°o user m·ªõi (c√≥ ki·ªÉm tra tr√πng)
    // T·∫°o user ƒë·∫ßy ƒë·ªß (cho local, c√≥ email + authProvider)
    async createUser({ username, email, password, role, authProvider }) {
        const pool = await connectDB();

        await pool.request()
            .input('username', sql.NVarChar, username)
            .input('email', sql.NVarChar, email || null)
            .input('password', sql.NVarChar, password)
            .input('role', sql.NVarChar, role)
            .input('authProvider', sql.NVarChar, authProvider)
            .query(`
                INSERT INTO users (username, email, password, role, authProvider)
                VALUES (@username, @email, @password, @role, @authProvider)
            `);

        console.log(`‚úÖ ƒê√£ th√™m user m·ªõi (local): ${username}`);
    }

    //  T√¨m user theo username
    async findUserByUsername(username) {
        if (!username) return null;

        const pool = await connectDB();
        const result = await pool.request()
            .input('username', sql.NVarChar, username)
            .query('SELECT * FROM users WHERE username = @username');

        return result.recordset[0];
    }

    
    // T√¨m user theo username ho·∫∑c email (d√πng cho ƒëƒÉng nh·∫≠p)
    async findUserByUsernameOrEmail(identifier) {
        const pool = await connectDB();
        const result = await pool.request()
            .input('identifier', sql.NVarChar, identifier)
            .query(`
                SELECT * FROM users
                WHERE username = @identifier OR email = @identifier
            `);
        return result.recordset[0];
    }

    // L·∫•y user theo id
    async findById(id) {
        const pool = await connectDB();
        const result = await pool.request()
            .input('id', sql.Int, id)
            .query('SELECT * FROM users WHERE id = @id');

        return result.recordset[0];
    }

    // X√≥a user theo id
    async deleteById(id) {
        const pool = await connectDB();
        await pool.request()
            .input('id', sql.Int, id)
            .query('DELETE FROM users WHERE id = @id');

        console.log(`üóëÔ∏è ƒê√£ x√≥a user c√≥ id: ${id}`);
    }

    //  C·∫≠p nh·∫≠t m·∫≠t kh·∫©u
    async updatePassword(id, newHashedPassword) {
        const pool = await connectDB();
        await pool.request()
            .input('id', sql.Int, id)
            .input('password', sql.NVarChar, newHashedPassword)
            .query('UPDATE users SET password = @password WHERE id = @id');

        console.log(`üîÑ ƒê√£ c·∫≠p nh·∫≠t m·∫≠t kh·∫©u cho user ID: ${id}`);
    }

    //  T·∫°o user ƒëƒÉng nh·∫≠p qua m·∫°ng x√£ h·ªôi
    async createSocialUser(username, avatar, provider) {
        const pool = await connectDB();

        const fakePassword = "oauth_random_fake_password"; // m·∫≠t kh·∫©u gi·∫£ (s·∫Ω ƒë∆∞·ª£c hash ·ªü ngo√†i)
        const result = await pool.request()
            .input('username', sql.NVarChar, username)
            .input('password', sql.NVarChar, fakePassword)
            .input('role', sql.NVarChar, 'user')
            .input('authProvider', sql.NVarChar, provider)
            .input('avatar', sql.NVarChar, avatar)
            .query(`
                INSERT INTO users (username, password, role, authProvider, avatar)
                OUTPUT INSERTED.*
                VALUES (@username, @password, @role, @authProvider, @avatar)
            `);

        return result.recordset[0];
    }

    //  T√¨m user theo username + provider
    async findByUsernameAndProvider(username, provider) {
        const pool = await connectDB();
        const result = await pool.request()
            .input('username', sql.NVarChar, username)
            .input('authProvider', sql.NVarChar, provider)
            .query('SELECT * FROM users WHERE username = @username AND authProvider = @authProvider');
        return result.recordset[0];
    }

    // T√¨m user theo username ho·∫∑c email (d√πng cho ƒëƒÉng nh·∫≠p)
    async findUserByUsernameOrEmail(identifier) {
        const pool = await connectDB();
        const result = await pool.request()
            .input('identifier', sql.NVarChar, identifier)
            .query(`
                SELECT * FROM users
                WHERE username = @identifier OR email = @identifier
            `);
        return result.recordset[0];
    }

}

module.exports = new UserModel();
